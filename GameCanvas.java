import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Comparator;
import javax.swing.*;

public class GameCanvas extends JComponent {

    private Timer repaintTimer;
    private Tile testSprite;
    private TileGrid groundGrid;
    private TileGrid edgeGrid;
    private TileGrid foliageGrid;


    public GameCanvas() {
        repaintTimer = new Timer(60 / 1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                repaint();
            }
        });
        repaintTimer.start();

        this.setPreferredSize(new Dimension(800, 600));

        ArrayList<File> listF = new ArrayList<>();
        for (File f : new File("assets").listFiles()) {
            listF.add(f);
        }
        listF.sort(new Comparator<File>() {
            @Override
            public int compare(File a, File b) {
                int a_num = Integer.parseInt(a.getName().split("[\\_\\.]")[1]);
                int b_num = Integer.parseInt(b.getName().split("[\\_\\.]")[1]);
                return a_num > b_num ? 1 : (a_num < b_num ? -1 : 0);
            }
        });

        for (File f : listF) {
            System.out.println(f.getName());
        }
        testSprite = new Tile(listF, 32);
        // Layer: Ground
        int[][] groundMap = {
                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36 },
                { 36, 36, -1, -1, -1, -1, -1, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36 },
                { 36, 36, -1, 153, 153, 153, -1, -1, -1, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
                        36 },
                { 36, 36, -1, 153, 153, 153, 153, 153, -1, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, -1, -1, -1, -1, 36,
                        36 },
                { 36, 36, -1, -1, 153, 153, 153, 153, -1, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, 153, 153, 153, -1, -1,
                        36 },
                { 36, 36, 36, -1, -1, 153, 153, -1, -1, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, 153, 153, 153, 153, -1,
                        36 },
                { 36, 36, 36, 36, -1, -1, -1, -1, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, -1, -1, -1, 153, -1, 36 },
                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, 153, -1, 36 },
                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, -1, -1, 36 },
                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36 },
                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36 },
                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36 },
                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, -1, -1, -1, 36, 36, 36, 36 },
                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, -1, 150, 153, 153, -1, 36, 36, 36,
                        36 },
                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, 154, 154, 153, 153, -1, -1, 36, 36,
                        36 },
                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, -1, -1, -1, -1, -1, -1, 36, 36, 36 },
                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36 },
                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36 }
        };

        // Layer: Water Edges
        int[][] edgeMap = {
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                { -1, -1, 138, 133, 133, 133, 140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                        -1 },
                { -1, -1, 182, -1, -1, -1, 117, 133, 140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                        -1 },
                { -1, -1, 182, -1, -1, -1, -1, -1, 148, -1, -1, -1, -1, -1, -1, -1, -1, -1, 138, 133, 133, 133, 140, -1,
                        -1 },
                { -1, -1, 162, 102, -1, -1, -1, -1, 148, -1, -1, -1, -1, -1, -1, -1, -1, -1, 182, -1, -1, -1, 117, 140,
                        -1 },
                { -1, -1, -1, 162, 102, -1, -1, 101, 164, -1, -1, -1, -1, -1, -1, -1, -1, -1, 182, -1, -1, -1, -1, 148,
                        -1 },
                { -1, -1, -1, -1, 162, 163, 163, 164, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 163, 163, 102, -1,
                        148, -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 182, -1, 148,
                        -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 163, 164,
                        -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 138, 139, 139, 140, -1, -1, -1,
                        -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 138, 133, 116, -1, -1, 148, -1, -1, -1,
                        -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 182, -1, -1, -1, -1, 117, 140, -1, -1,
                        -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 163, 163, 163, 163, 163, 164, -1, -1,
                        -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
        };

        // Layer: Foliage
        int[][] foliageMap = {
                { -1, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, -1, -1, 94, -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, -1, -1, -1, -1, -1, -1, 85, -1, -1, -1, -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, 94, -1, -1, -1, -1, -1, -1, 94, -1, -1, -1, -1, -1, -1, -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82 },
                { -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                { -1, -1, -1, -1, -1, -1, 85, -1, -1, 94, -1, 79, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                { -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, -1, -1, 85, -1, -1, -1, -1 },
                { -1, -1, -1, 79, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                { -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, 76, -1, -1, -1, -1 },
                { -1, -1, -1, -1, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, -1, -1, -1, -1, 85, -1 },
                { -1, -1, -1, -1, -1, -1, 94, -1, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, -1, -1 },
                { -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, -1 },
                { -1, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                { -1, -1, 94, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
        };

        groundGrid = new TileGrid(testSprite, groundMap);
        edgeGrid =  new TileGrid(testSprite, edgeMap);
        foliageGrid = new TileGrid(testSprite, foliageMap);

    }

    @Override
    public void paintComponent(Graphics g) {
        Graphics2D g2d = (Graphics2D) g;
        groundGrid.draw(g2d);
        edgeGrid.draw(g2d);
        foliageGrid.draw(g2d);
    }

}
