import java.awt.*;
import java.awt.event.*;
import java.awt.geom.Rectangle2D;
import javax.swing.*;

public class GameCanvas extends JComponent {

        private Timer repaintTimer;
        private Sprite testSprite;
        private TileGrid groundGrid;
        private TileGrid edgeGrid;
        private TileGrid foliageGrid;
        private Player player;

        public GameCanvas() {
                repaintTimer = new Timer(60 / 1000, new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent e) {
                                repaint();
                        }
                });
                repaintTimer.start();

                this.setPreferredSize(new Dimension(800, 600));

                SpriteFiles tileMapFiles = new SpriteFiles("assets/tilemap");

                player = new Player();

                testSprite = new Tile(tileMapFiles.getFiles(), 32);

                // Layer: Ground
                int[][] groundMap = {
                                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
                                                36, 36, 36, 36 },
                                { 36, 36, -1, -1, -1, -1, -1, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
                                                36, 36, 36, 36 },
                                { 36, 36, -1, 153, 153, 153, -1, -1, -1, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
                                                36, 36, 36,
                                                36 },
                                { 36, 36, -1, 153, 153, 153, 153, 153, -1, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, -1,
                                                -1, -1, -1, 36,
                                                36 },
                                { 36, 36, -1, -1, 153, 153, 153, 153, -1, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, 153,
                                                153, 153, -1, -1,
                                                36 },
                                { 36, 36, 36, -1, -1, 153, 153, -1, -1, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, 153,
                                                153, 153, 153, -1,
                                                36 },
                                { 36, 36, 36, 36, -1, -1, -1, -1, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, -1, -1,
                                                -1, 153, -1, 36 },
                                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
                                                -1, 153, -1, 36 },
                                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
                                                -1, -1, -1, 36 },
                                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
                                                36, 36, 36, 36 },
                                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
                                                36, 36, 36, 36 },
                                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
                                                36, 36, 36, 36 },
                                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, -1, -1, -1,
                                                36, 36, 36, 36 },
                                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, -1, 150, 153, 153, -1,
                                                36, 36, 36,
                                                36 },
                                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, 154, 154, 153, 153,
                                                -1, -1, 36, 36,
                                                36 },
                                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, -1, -1, -1, -1, -1, -1,
                                                -1, 36, 36, 36 },
                                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
                                                36, 36, 36, 36 },
                                { 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
                                                36, 36, 36, 36 }
                };

                // Layer: Water Edges
                int[][] edgeMap = {
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, -1 },
                                { -1, -1, 138, 133, 133, 133, 140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, -1,
                                                -1 },
                                { -1, -1, 182, -1, -1, -1, 117, 133, 140, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, -1,
                                                -1 },
                                { -1, -1, 182, -1, -1, -1, -1, -1, 148, -1, -1, -1, -1, -1, -1, -1, -1, -1, 138, 133,
                                                133, 133, 140, -1,
                                                -1 },
                                { -1, -1, 162, 102, -1, -1, -1, -1, 148, -1, -1, -1, -1, -1, -1, -1, -1, -1, 182, -1,
                                                -1, -1, 117, 140,
                                                -1 },
                                { -1, -1, -1, 162, 102, -1, -1, 101, 164, -1, -1, -1, -1, -1, -1, -1, -1, -1, 182, -1,
                                                -1, -1, -1, 148,
                                                -1 },
                                { -1, -1, -1, -1, 162, 163, 163, 164, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 163,
                                                163, 102, -1,
                                                148, -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                182, -1, 148,
                                                -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                162, 163, 164,
                                                -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 138, 139, 139,
                                                140, -1, -1, -1,
                                                -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 138, 133, 116, -1, -1,
                                                148, -1, -1, -1,
                                                -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 182, -1, -1, -1, -1, 117,
                                                140, -1, -1,
                                                -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 163, 163, 163, 163,
                                                163, 164, -1, -1,
                                                -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, -1 }
                };

                // Layer: Foliage
                int[][] foliageMap = {
                                { -1, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1,
                                                -1, -1, 94, -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, -1, -1, -1, -1, -1, -1, 85,
                                                -1, -1, -1, -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, 85 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, 94, -1, -1, -1, -1, -1, -1, 94, -1, -1, -1,
                                                -1, -1, -1, -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, 82 },
                                { -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, -1 },
                                { -1, -1, -1, -1, -1, -1, 85, -1, -1, 94, -1, 79, -1, -1, -1, 76, -1, -1, -1, -1, -1,
                                                -1, -1, -1, -1 },
                                { -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 76, -1, -1, 85,
                                                -1, -1, -1, -1 },
                                { -1, -1, -1, 79, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, -1 },
                                { -1, 82, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, 76,
                                                -1, -1, -1, -1 },
                                { -1, -1, -1, -1, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1, 94, -1, -1, -1, -1,
                                                -1, -1, 85, -1 },
                                { -1, -1, -1, -1, -1, -1, 94, -1, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, 82, -1, -1 },
                                { -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, 79, -1 },
                                { -1, -1, -1, -1, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, -1 },
                                { -1, -1, 94, -1, -1, -1, -1, -1, -1, 82, -1, -1, -1, 76, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, -1 },
                                { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                                                -1, -1, -1, -1 }
                };

                groundGrid = new TileGrid(testSprite, groundMap);
                edgeGrid = new TileGrid(testSprite, edgeMap);
                foliageGrid = new TileGrid(testSprite, foliageMap);
                addKeyBindings();
                addMouseListener();

        }

        public void addKeyBindings() {
                this.setFocusable(true);
                this.addKeyListener(new KeyAdapter() {
                        @Override
                        public void keyPressed(KeyEvent e) {
                                switch (e.getKeyCode()) {
                                        case KeyEvent.VK_W:
                                                player.move("UP");
                                                break;
                                        case KeyEvent.VK_S:
                                                player.move("DOWN");
                                                break;
                                        case KeyEvent.VK_A:
                                                player.move("LEFT");
                                                break;
                                        case KeyEvent.VK_D:
                                                player.move("RIGHT");
                                                break;
                                }
                        }

                        @Override
                        public void keyReleased(KeyEvent e) {
                                player.stop();
                        }
                });
        }

        public void addMouseListener() {
                this.addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                                int x = e.getX();
                                int y = e.getY();
                                
                                int tileSize = 32;
                                int tileX = x / tileSize;
                                int tileY = y / tileSize;
                                
                                System.out.println("Clicked on tile: [" + tileX + ", " + tileY + "]");
                                
                                if (tileX < groundGrid.getWidth() && tileY < groundGrid.getHeight()) {
                                        System.out.println("Ground tile ID: " + groundGrid.getTileAt(tileY, tileX));
                                        System.out.println("Edge tile ID: " + edgeGrid.getTileAt(tileY, tileX));
                                        System.out.println("Foliage tile ID: " + foliageGrid.getTileAt(tileY, tileX));
                                }
                        }
                });
                
        }

        @Override
        public void paintComponent(Graphics g) {
                Graphics2D g2d = (Graphics2D) g;
                groundGrid.draw(g2d);
                edgeGrid.draw(g2d);
                foliageGrid.draw(g2d);
                player.draw(g2d);
                g2d.draw(player.getHitbox());

                for (int i = 0; i < edgeGrid.getHeight(); i++) {
                        for (int j = 0; j < edgeGrid.getWidth(); j++) {
                                Rectangle2D hitbox = edgeGrid.getTileHitBoxAt(i, j);
                                if (hitbox != null) {
                                        g2d.draw(hitbox);
                                }
                        }
                }
        }

}
